#ifndef __QUERYMANAGER_HPP__
#define __QUERYMANAGER_HPP__

#include <QObject>
#include <QMultiMap>
#include <QPair>
#include <QVector>
#include <QStringList>
#include <QSqlDatabase>
#include <QSqlQuery>

/**
* @class QueryManager
* @brief Класс - менеджер запросов к базе данных.
*
* Класс осуществляет хранение, управление и выполнение именованных (заранее определенных), так и неименованных запросов
* к базе данных. Содержит логику по управлению текущим активным подключением к базе данных. Сохраняет сообщение о
* последней ошибке, которая произошла во время выполнения запроса.
* Класс реализован как синглетон. При использовании доступ к объекту осуществляется с помощью @ref QueryManager::instance.
* Для удаления объекта из памяти необходимо использовать @ref QueryManager::destroyInstance
*/
class QueryManager : public QObject
{
    Q_OBJECT
public:
    /**
    * @brief Глобальная точка доступа к объекту.
    *
    * Если объект не был создан, то создание происходит с использованием
    * соединения с базой данных, которые были указаны при запуске приложения.
    * @sa <a href="http://qt-project.org/doc/qt-4.8/qsqldatabase.html#database">QSqlDatabase::database</a>,
    * DatabaseSettings::databaseConnectionName
    * @return Указатель на объект менеджера запросов.
    */
    static QueryManager* instance();

    /**
    * @brief Освобождает память, выделенную под менеджер запросов.
    */
    static void destroyInstance();

    /**
    * @brief Создает именованный запрос.
    *
    * Если запрос с указанным именем уже существует, старый вариант будет перезаписан.
    * Сам запрос может быть задан в виде шаблона, в котором указаны через '\%' номера аргументов запроса.
    * @code{.sql}
    * SELECT id FROM table_name WHERE field1='%1' AND field2='%2';
    * @endcode
    * @param name Имя запроса
    * @param query Шаблон SQL запроса
    */
    virtual void createNamedQuery(QString name, QString query);

    /**
    * @brief Выполняет ранее заданный шаблон запроса.
    *
    * В качестве списка аргументов в шаблона используется пустой список.
    * @param name Название запроса
    */
    virtual QSqlQuery executeNamedQuery(QString name);

    /**
    * @brief Выполняет ранее созданный шаблон запроса с заданным списком аргументов.
    *
    * В процессе формирования запроса по заданным аргументам производится проверка на соответствия количества
    * аргументов в шаблоне запроса и в переданном списке.
    * @param name Название запроса
    * @param args Список аргументов запроса
    * @return Объект класса <a href="http://qt-project.org/doc/qt-4.8/qsqlquery.html">QSqlQuery</a> с результатами
    * выполнения запроса. Объект класса может быть пустым, если запрос с указанным названием не был найден, либо в
    * процессе выполнения была ошибка.
    */
    virtual QSqlQuery executeNamedQuery(QString name, QStringList args);

    /**
    * @brief Выполняет все запросы, которые объединены в транзакцию с указанным именем.
    *
    * Во время выполнения транзакции формируется массив id записей, который были добавлены в процессе выполнения
    * последнего запроса транзакции, если для данного запроса был указан параметр, сигнализирующий о необходимости
    * сохранения id вставленной записи.
    * @note Провайдер базы данных должен поддерживать выполнение транзакций
    * @param name Название транзакции
    * @return <b>true</b>, если все запросы транзакции были успешно выполнены, в противном случае - <b>false</b>
    */
    virtual bool executeTransaction(QString name);

    /**
    * @brief Выполняет связывание списка аргументов с шаблоном запроса, который включен в какую-либо транзакцию.
    *
    * В списке аргументов можно оставлять места для аргументов, которые будут вычислены во время выполнения транзакции.
    * Места аргументов также, как и в шаблонах запросов, указывается через '\%'
    * @param queryName Название запроса, для которого будет выполнено связывание
    * @param args Список аргументо для шаблона
    * @return <b>true</b>, когда связывание выполнено успешно, <b>false</b> - если запрос с указанным именем не был
    * найден
    */
    virtual bool prepareQuery(QString queryName, QStringList args);

    /**
    * @brief Добавляет запрос к транзакции и производит его настройку.
    * @param transactionName Название транзакции, к которой необходимо добавить запрос
    * @param queryName Название запроса, который заранее был создан
    * @param needCallLastId Флаг, который показывает, нужно ли сохранять id после выполнения запроса (актуально только
    * для запросов на вставку данных)
    * @return Успешность добавления запроса к транзакции
    * @attention Возможна некорректная работа, т.к. для хранения запросов одной транзакции используется ассоциативный
    * массив <a href="http://qt-project.org/doc/qt-4.8/qmultimap.html">QMultiMap</a>
    */
    virtual bool addQueryToTransacton(QString transactionName, QString queryName, bool needCallLastId);

    /**
    * @brief Добавляет шаблон запроса к транзакции и сохраняет запрос с указанным именем.
    * @param transactionName Название транзакции, к которой необходимо добавить запрос
    * @param queryName Название запроса (с таким названием запрос будет сохранен)
    * @param query Шаблон запроса
    * @param needCallLastId Флаг, который показывает, нужно ли сохранить id после выполнения запроса
    * @return Успешность добавления запроса к транзакции
    */
    virtual bool addQueryToTransacton(QString transactionName, QString queryName, QString query, bool needCallLastId);

    /**
    * @brief Выполняет SQL запрос, переданный в виде строки.
    * @param strQuery Строковое представление запроса
    * @return Объект класса <a href="http://qt-project.org/doc/qt-4.8/qsqlquery.html">QSqlQuery</a>, содержащий
    * информацию о результате выполнения запроса (и сам результат выполнения для запросов на выборку.
    */
    virtual QSqlQuery executeQuery(QString strQuery);

    /**
    * @brief Получение активного подключения к базе данных
    * @return Объект подключения к базе данных
    */
    QSqlDatabase connection() const;

    /**
    * @brief Установка активного подключения к базе данных
    * @param conn Объект, содержащий информацию об активном подключении к базе данных
    */
    void setConnection(QSqlDatabase conn);

    /**
    * @brief Получает текстовое сообщение, которое содержит информацию о последней возникшей во время работы ошибке.
    * @return Строковое представление сообщения об ошибке
    */
    virtual QString lastError() const;
private:
    //! Указатель на менеджер запросов
    static QueryManager *mInstance;

    /**
    * @brief Конструктор менеджера запросов
    * @param connection Подключение к базе данных, по средствам которого будет осуществляться выполнение запросов
    * @param parent Указатель на родительский объект
    */
    explicit QueryManager(QSqlDatabase connection, QObject *parent = 0);

    //! Стандартный деструктор
    virtual ~QueryManager();

    //! Ассоциативный массив, который хранит соответствия между названием транзакций и парами, в которых первые элементы
    //! представлены названием запроса, входящего в транзакцию, а вторые - флаги, сигнализирующие необходимость сохранения
    //! id вставленных записей.
    QMultiMap<QString, QPair<QString, bool> > mNamedTransaction;

    //! Ассоциативный массив, хранящий соответствия между именами и шаблонами запросов
    QMap<QString, QString> mNamedQuery;

    //! Ассоциативный массив хранящий соответствия между названиями запросов и списками их аргументов
    QMap<QString, QStringList> mQueryParam;

    //! Строковок сообщение о последней ошибке
    QString mLastError;

    //! Массив id записей, которые были добавлены во время выполнения запросов транзакции
    QVector<int> mIdVector;

    //! Объект, хранящий информацию о подключении к базе данных, с которым работает менеджер запросов
    QSqlDatabase mQueryConnection;

    //! Флаг, обозначающий состояние выполения транзакции
    bool mIsTransactionProccessed;
signals:
    //! Сигнал, который высылается при внесении изменений в данные, хранимые какой-либо таблицей базы данных
    void dataChanged();
};

#endif // QUERYMANAGER_H
